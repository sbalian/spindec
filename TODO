Seto Balian, Oct 22, 2014

TO OPTIMIZE
- SpinOperator default copy constructor

EXTENSIVE TESTING AND COMPARISON TO ALL CODE ESSENTIAL


1-cluster tests!!!
eg
vector<SpinInteractionEdge> SpinBath::make_intrabath_edges(
    const UInt order,
    const SpinInteractionEdge& intrabath_edge) const
  // order = 1, return an empty edge vector
  // TODO is this chaotic with 1-clusters?!


SpinBath
// TODO Generalize to finite temperature; Generalize for multiple spin species?
//      or use combinations of single-spin-species baths?

- effective use of pointers, whatever the kind ...

- Be careful when using maps, see doc, also with all other std methods

- Martin auto_ptr, smart ptr discussion ...

- needs testing and polishing before release

- namespace pollution
- Better "make" system. CMake?
- Also build into library and binaries

- Don't do multiple clones for auto_ptrs

- Change MatrixRepresentation name ... Hilbert space class?

- See all Mac warnings
- '!' logical brackets!!!, try to avoid '!'
- Better error handling and error messages
- Make sure using spin system base when meaning to!eg spin donor properties
  may be lost!!! also rename spin system -> spin system bases where applicable,
  have auto ptr convention? maybe typedefs? how about a smart pointer template?
- Comment all code properly ...
- operator overloading arithmetic speedup eg spin operator multiply

- pi_pulse methods with no arguments to spin system classes?
- For SpinDonor, distinguish the transition orthogonal levels from
  other orthogonal levels ...

- Eclipse on Mac warnings and Xcode warning about "no viable constructor"
- Eclipse ! mark about candidate constructor

- IMPORTANT: UNDERSTAND ITERATORS
- IMPORTANT: WHEN USING FIND, WHAT HAPPENS WHEN YOU SEARCH AND EMPTY VECTOR?!

- Maybe use asserts etc try catch etc instead of Errors::

- Better basis checks etc... also where to put eigenvalues and eigenvectors
  associated with operators? see EvolutionOperator, the eigenvalues and
  eigenvectors are for the Hamiltonian!

- make sure there are no sorting inefficiencies throughout SpinDec, with
  regards to ::Cluster

- In old code, look for constructor of one class being called in a constructor
  in the same class ... did not find so far, should not work!

- Make sure analytical methods in SpinSystemBase derived objects produce
  the same results as when calculated using SpinSystem.
  
- Multiprecision support? Do checks for numerical errors ...

- BE CAREFUL WITH AUTO POINTERS!!!

- Make sure one B-field throughout? or if not, make sure set fields in classes
  make physical sense ...
- Improve diagonalizer options?

- BE VERY CAREFUL ABOUT EIGEN'S LAZY EVALUATION. NOALIAS AND EVAL METHODS ...
  EG. MAT MULT, a = a.transpose()
  
- make sure everything is being used properly and safely with auto ptrs
  e.g. clone methods

- Do const data members properly
- TEST EIGENVALUE PRECISION CAREFULLY (~ 0.1 Hz limit? numerical junk after?
  compare different codes to see?)
- Make sure all default constructors lead to well defined behaviour!!!
- Have put auto_ptr in vector ... it works, but is it safe? (as dm though)

- Comments with headings like Constructors, Data members, etc.
- Also, consistency with comments - use doxygen

- BoostEigen -> proper extension of Eigen? See Eigen documentation
- Make BoostEigen methods to work on Eigen base types
- return Type& for speed?
- In diagonalize zheev w[n] - use "new"?
- ../src/SpinInteraction.cpp:15: warning: abstract virtual
  'virtual double SpinInteraction::calculate_non_spatial_dependence() const'
  called from constructor
- generalise to non-uniform magnetic fields
- more comments and provide some sort of consistent documentation
- how to properly deal with Eigen dynamic allocation, e.g. MatrixXXd.
  e.g. initialisation of data members in constructors
- make sure ArrayXd vs ArrayXXd setting one to another works as expected ...
- Add support for eigenvalues and eigenvectors for non-Hamiltonian operators
- Better const correctness (particularly with data members) and resolve issues
  (e.g. vectors)
  with std::vector. Now relies on public set methods ...
- Throw exceptions (kill Errors.h)
- Virtual destructors also for derived classes?
- Print methods
- Avoid algebra involving different orders of magnitude
- Return "size_t" for vector sizes? Like in STL? (machine dependence)
- Default constructors (and destructors ...)
- More comments + documentation
- Improve Hamiltonian fill implementation ...
- DONE Casting to long double for std::sqrt ...
- Make sure all casting (and related) is done properly ...
- get methods return *const references* for big things + similar (see Google
  style guide for these type of things)
- Nasty get_matrix() does not work for call to SpinInteraction::fill but
  works if matrix_ used - see if similar issues exist and don't use
  type & ref for argument - use type * ptr instead!
- SpinBasis(EigenArray) acting as a cast method for SpinInteraction::fill!
  Can we avoid such things?
- Avoid multiplying(or other math on) different orders of magnitude
  (with 'large' differences) as much as possible - ie choose the best natural
  units + if need be separate out calculations and do the "different order of
  magnitude" operation once at the end (what's the best strategy for this sort
  of problem?)
- Do default constructors properly (also destructors?)
- Relative paths for includes
- where to put global constants?
- where to put global functions?
- PLUS and MINUS? OK?
- Deal with Hermitian REAL eigenvalues ... double, not cdouble ...
- Adhere to Google style guide better, constants, typedefs, etc.
- Struct declare in header and implement in source? or all in header?
- Extensive commenting and doc
- Make sure using the custom copy constructor and the assignment operators
  properly. Also, rule of three? Do I really need a destructor for
  edge class? Also, use = in copy constructor?
- Make sure you're using auto_ptr properly

- Are the restore formatting codes OK in print methods?



GRAVEYARD
---------

- TODO 31 jan 2014
- DONE - get rid of spindecoherence old from eclipse
- DONE - Index, includes, etc. settings (do a clean import properly)
- DONE - get rid of the long double casts for sqrt and similar
- DONE - fill methods matrix & a to matrix * a and similar


